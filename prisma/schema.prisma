generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  username      String         @unique
  nickname      String?
  password      String?
  name          String?
  role          String         @default("nurse")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]

  @@index([username])
  @@index([email])
}

model Conversation {
  id           Int                 @id @default(autoincrement())
  userId       Int
  startedAt    DateTime            @default(now())
  endedAt      DateTime?
  durationSec  Int?
  overtime     Boolean             @default(false)
  reflection   String?

  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  scenarioId   Int?
  scenario     Scenario?           @relation(fields: [scenarioId], references: [id])

  score        Int? 

  user         User                @relation(fields: [userId], references: [id])
  messages     Message[]
  reflections  ReflectionMessage[]

  // 加入護理紀錄筆記的一對一關聯
  nursingCaseNote NursingCaseNote?

}

model NursingCaseNote {
  id              Int          @id @default(autoincrement())
  conversationId  Int          @unique
  conversation    Conversation @relation(fields: [conversationId], references: [id])

  rawText         String       // 自由敘述內容
  matchedCodes    String[]     // 自動比對後紀錄到的項目 (e.g. ["fever_start", "vomiting"])

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Message {
  id               Int                  @id @default(autoincrement())
  conversationId   Int
  sender           String
  text             String
  timestamp        DateTime             @default(now())
  elapsedSeconds   Int
  delayFromPrev    Int?
  isDelayed        Boolean?
  tag              String?

  isCorrect        Boolean?
  emotionLabel     String?
  emotionScore     Float?
  audioUrl         String?
  conversation     Conversation         @relation(fields: [conversationId], references: [id])

  scoringItems     ScoringItem[]        @relation("MessageToScoringItems")
}

model ReflectionMessage {
  id             Int          @id @default(autoincrement())
  conversationId Int
  sender         String
  text           String
  timestamp      DateTime     @default(now())
  sourceNodeId   String?
  strategyTag    String?

  conversation   Conversation @relation(fields: [conversationId], references: [id])

}

model Scenario {
  id                Int            @id @default(autoincrement())
  title             String
  description       String
  scenarioCode      String         @unique
  difficulty        Int            @default(1)
  category          String
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  patientName       String         @default("暫無")
  patientAge        Int            @default(0)
  diagnosis         String         @default("未填寫")
  accompaniedBy     String         @default("未知")
  orderNPO          Boolean        @default(false)
  triggerStatements String[]       @default([])
  keyTopics         String[]       @default([])
  estimatedDuration Int            @default(8)
  conversations     Conversation[]
}

model ScoringItem {
  id         Int     @id @default(autoincrement())
  code       String  @unique
  category   String
  subcategory String
  score      Int
  messages   Message[]  @relation("MessageToScoringItems")  // ✅ 被哪些訊息觸發了（間接屬於對話）
}

